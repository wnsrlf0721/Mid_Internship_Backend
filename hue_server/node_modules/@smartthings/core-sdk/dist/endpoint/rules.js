"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RulesEndpoint = exports.IntervalUnit = exports.DayOfWeek = exports.LocationAttribute = exports.MapOperand = exports.OperandAggregationMode = exports.TimeReference = exports.SubscriptionMode = exports.ArmState = exports.ConditionAggregationMode = void 0;
const endpoint_1 = require("../endpoint");
const endpoint_client_1 = require("../endpoint-client");
const types_1 = require("../types");
var ConditionAggregationMode;
(function (ConditionAggregationMode) {
    ConditionAggregationMode["Any"] = "Any";
    ConditionAggregationMode["All"] = "All";
})(ConditionAggregationMode = exports.ConditionAggregationMode || (exports.ConditionAggregationMode = {}));
var ArmState;
(function (ArmState) {
    ArmState["ArmedStay"] = "ArmedStay";
    ArmState["ArmedAway"] = "ArmedAway";
    ArmState["Disarmed"] = "Disarmed";
})(ArmState = exports.ArmState || (exports.ArmState = {}));
var SubscriptionMode;
(function (SubscriptionMode) {
    SubscriptionMode["Auto"] = "Auto";
    SubscriptionMode["Always"] = "Always";
    SubscriptionMode["Never"] = "Never";
})(SubscriptionMode = exports.SubscriptionMode || (exports.SubscriptionMode = {}));
var TimeReference;
(function (TimeReference) {
    TimeReference["Now"] = "Now";
    TimeReference["Midnight"] = "Midnight";
    TimeReference["Sunrise"] = "Sunrise";
    TimeReference["Noon"] = "Noon";
    TimeReference["Sunset"] = "Sunset";
})(TimeReference = exports.TimeReference || (exports.TimeReference = {}));
var OperandAggregationMode;
(function (OperandAggregationMode) {
    OperandAggregationMode["None"] = "None";
    OperandAggregationMode["Avg"] = "Avg";
    OperandAggregationMode["Sum"] = "Sum";
    OperandAggregationMode["Min"] = "Min";
    OperandAggregationMode["Max"] = "Max";
    OperandAggregationMode["Least"] = "Least";
})(OperandAggregationMode = exports.OperandAggregationMode || (exports.OperandAggregationMode = {}));
class MapOperand extends null {
}
exports.MapOperand = MapOperand;
var LocationAttribute;
(function (LocationAttribute) {
    LocationAttribute["Mode"] = "Mode";
    LocationAttribute["ArmState"] = "ArmState";
})(LocationAttribute = exports.LocationAttribute || (exports.LocationAttribute = {}));
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["Sun"] = "Sun";
    DayOfWeek["Mon"] = "Mon";
    DayOfWeek["Tue"] = "Tue";
    DayOfWeek["Wed"] = "Wed";
    DayOfWeek["Thu"] = "Thu";
    DayOfWeek["Fri"] = "Fri";
    DayOfWeek["Sat"] = "Sat";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));
var IntervalUnit;
(function (IntervalUnit) {
    IntervalUnit["Second"] = "Second";
    IntervalUnit["Minute"] = "Minute";
    IntervalUnit["Hour"] = "Hour";
    IntervalUnit["Day"] = "Day";
    IntervalUnit["Week"] = "Week";
    IntervalUnit["Month"] = "Month";
    IntervalUnit["Year"] = "Year";
})(IntervalUnit = exports.IntervalUnit || (exports.IntervalUnit = {}));
class RulesEndpoint extends endpoint_1.Endpoint {
    constructor(config) {
        super(new endpoint_client_1.EndpointClient('rules', config));
    }
    /**
     * List the rules for a location and the access token principal. The principal is the user in the case of a
     * PAT (personal access) token or the installed app in the case of a SmartApp token. The rules belonging to one
     * principal cannot see the rules belonging to another principal.
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    list(locationId) {
        return this.client.getPagedItems(undefined, { locationId: this.locationId(locationId) });
    }
    /**
     * Get a specific rule
     * @param id UUID of the rule
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    get(id, locationId) {
        return this.client.get(id, { locationId: this.locationId(locationId) });
    }
    /**
     * Delete a specific rule
     * @param id UUID of the rule
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    delete(id, locationId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.delete(id, { locationId: this.locationId(locationId) });
            return types_1.SuccessStatusValue;
        });
    }
    /**
     * Create a rule
     * @param data the rule definition
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    create(data, locationId) {
        return this.client.post(undefined, data, { locationId: this.locationId(locationId) });
    }
    /**
     * Update a rule
     * @param id UUID of the rule
     * @param data the new rule definition
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    update(id, data, locationId) {
        return this.client.put(id, data, { locationId: this.locationId(locationId) });
    }
    /**
     * Execute a rule's actions
     * @param id UUID of the rule
     * @param locationId UUID of the location, If the client is configured with a location ID this parameter
     * can be omitted
     */
    execute(id, locationId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.post(`execute/${id}`, undefined, { locationId: this.locationId(locationId) });
            return types_1.SuccessStatusValue;
        });
    }
}
exports.RulesEndpoint = RulesEndpoint;
