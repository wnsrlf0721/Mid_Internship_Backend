import { Endpoint } from '../endpoint';
import { EndpointClientConfig } from '../endpoint-client';
import { Status } from '../types';
export interface LocationItem {
    locationId: string;
    name: string;
}
export interface LocationUpdate {
    name: string;
    latitude?: number;
    longitude?: number;
    regionRadius?: number;
    temperatureScale: 'F' | 'C';
    locale?: string;
    additionalProperties?: {
        [name: string]: string;
    };
}
export interface LocationCreate extends LocationUpdate {
    countryCode: string;
}
export interface Location extends LocationCreate {
    locationId: string;
    timeZoneId: string;
    backgroundImage: string;
}
export declare class LocationsEndpoint extends Endpoint {
    constructor(config: EndpointClientConfig);
    /**
     * Returns a list of all locations accessible by the principal (i.e. user)
     */
    list(): Promise<LocationItem[]>;
    /**
     * Get the definition of a specific location
     * @param id UUID of the location
     */
    get(id?: string): Promise<Location>;
    /**
     * Creates a location
     * @param location definition of the location
     */
    create(location: LocationCreate): Promise<Location>;
    /**
     * Updates a location
     * @param id UUID of the location
     * @param location new location definition
     */
    update(id: string, location: LocationUpdate): Promise<Location>;
    /**
     * Deletes a location and all of the devices and installed apps associated with it.
     * @param id UUID of the location
     */
    delete(id: string): Promise<Status>;
}
//# sourceMappingURL=locations.d.ts.map